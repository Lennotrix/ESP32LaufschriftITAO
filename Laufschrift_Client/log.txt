
void SerialInput()
{
  String sInput = Serial.readStringUntil(';');

  if (sInput.substring(0, 1) == "#")
  {
    if (sInput.substring(1) == (const char *)"Restart;")
    {
      ESP.restart();
    }
    if (sInput.substring(1, sInput.indexOf('%')) == "EEPROM")
    {

      JSONVar eepromJson = JSON.parse(sInput.substring(sInput.indexOf('{'), sInput.lastIndexOf('}') + 1));
      if (JSON.typeof(eepromJson) == "undefined")
      {
      }
      else
      {
        ITAO_LAUFSCHRIFT_DATEN newITAOEEPROM;
        if (eepromJson.hasOwnProperty("EEusername") && eepromJson.hasOwnProperty("EEpassword") && eepromJson.hasOwnProperty("EEssid") && eepromJson.hasOwnProperty("EEIPassword"))
        {
          strcpy(newITAOEEPROM.EEusername, eepromJson["EEusername"]);
          strcpy(newITAOEEPROM.EEpassword, eepromJson["EEpassword"]);
          strcpy(newITAOEEPROM.EEssid, eepromJson["EEssid"]);
          strcpy(newITAOEEPROM.EEIPassword, eepromJson["EEIPassword"]);

          Serial.println(newITAOEEPROM.EEIPassword);
          if (MyEEPROM->WriteEEPROM(newITAOEEPROM))
          {
            ESP.restart();
          }
          RunLed(false);
          PauseJetzt(2000);
          RunLed(true);
          PauseJetzt(2000);
        }
      }
    }
  }
}



char* http::GetPhrase() {
  const char* endpoint = "http://10.1.1.30:5047/api/v01/phrase?id=47";
  char* phrase = &buffer[0];
  *phrase = '\0';
  bool anonym;

  HTTPClient httpCli;
  Serial.println(endpoint);
  httpCli.begin(endpoint);  //HTTP
  httpCli.addHeader("Content-Type", "application/json");
  httpCli.addHeader("Authorization", pBearer);

  int httpCode = httpCli.GET();
  Serial.println(httpCode);
  if (httpCode == 401) {
    this->pBearer = Login();
    strncat(phrase, ("ERROR: 401"), (HTTP_MAX_LEN - strlen(phrase)));
    return phrase;
  }
  else if(httpCode != 200){
    strncat(phrase, "Gehen Sie jetzt auf [WEBSITE], um hier Sätze anzeigen zu lassen!", (HTTP_MAX_LEN - strlen(phrase)));
    return phrase;
  }
  JSONVar jsonObject = JSON.parse(httpCli.getString().c_str());
  if (JSON.typeof(jsonObject) == "undefined") {
    Serial.println("Parsing input failed!");
    strncat(phrase, "Gehen Sie jetzt auf [WEBSITE], um hier Sätze anzeigen zu lassen!", (HTTP_MAX_LEN - strlen(phrase)));
    return phrase;
  }
  Serial.println(jsonObject);
  if (jsonObject.hasOwnProperty("anonym")) {
    anonym = (bool)jsonObject["anonym"];
  }
  if (!anonym) {
    if (jsonObject.hasOwnProperty("creatorClassName")) {

      strncat(phrase, ((const char*)jsonObject["creatorClassName"]), (HTTP_MAX_LEN - strlen(phrase)));
      strncat(phrase, ": ", (HTTP_MAX_LEN - strlen(phrase)));
    }
    if (jsonObject.hasOwnProperty("creatorFirstName")) {
      strncat(phrase, ((const char*)jsonObject["creatorFirstName"]), (HTTP_MAX_LEN - strlen(phrase)));
      strncat(phrase, ": ", (HTTP_MAX_LEN - strlen(phrase)));
    }
  }
  if (jsonObject.hasOwnProperty("phrase")) {
    strncat(phrase, ((const char*)jsonObject["phrase"]), (HTTP_MAX_LEN - strlen(phrase)));
  }

  httpCli.end();

  return phrase;
}
